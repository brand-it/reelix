name: "build"

on:
  push:
    branches:
      - release
  pull_request:
    types:
      - opened
      - synchronize
jobs:
  build-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest" # for Intel based macs.
            args: "--target x86_64-apple-darwin"
          - platform: "ubuntu-22.04" # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ""
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    env:
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
    steps:
      - uses: actions/checkout@v4
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}
      - name: Import Apple Auth Key (MacOS only)
        if: matrix.platform == 'macos-latest'
        env:
          APPLE_AUTH_KEY_BASE64: ${{ secrets.APPLE_AUTH_KEY_BASE64 }}
        run: |
          echo $APPLE_AUTH_KEY_BASE64 | base64 --decode > AuthKey_78LZT6863R.p8
      - name: Verify Apple Auth Key (MacOS only)
        if: matrix.platform == 'macos-latest'
        run: |
          first_line=$(head -n 1 AuthKey_78LZT6863R.p8)
          echo "First line: $first_line"
          if [[ "$first_line" != "-----BEGIN PRIVATE KEY-----" ]]; then
            echo "Error: Private key does not start with '-----BEGIN PRIVATE KEY-----'."
            exit 1
          fi
          echo "APPLE_API_KEY_PATH=$PWD/AuthKey_78LZT6863R.p8" >> $GITHUB_ENV
          echo "Exported APPLE_API_KEY_PATH $PWD/AuthKey_78LZT6863R.p8"
      - name: Import Apple Developer Certificate (MacOS only)
        if: matrix.platform == 'macos-latest'
        env:
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          security find-identity -v -p codesigning build.keychain
      - name: Verify Certificate (MacOS only)
        if: matrix.platform == 'macos-latest'
        run: |
          echo "Looking for Developer ID Application..."
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application")

          echo "Extracting Cert ID..."
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          if [[ -z "$CERT_ID" ]]; then
            echo "Failed to extract CERT_ID from CERT_INFO."
            exit 1
          fi

          echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
          echo "Certificate imported successfully."
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.
      - name: install frontend dependencies
        run: npm install # change this to npm, pnpm or bun depending on which one you use.
      - uses: tauri-apps/tauri-action@v0
        if: github.ref_name != 'release'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: ${{ matrix.args }}
      - uses: tauri-apps/tauri-action@v0
        if: github.ref_name == 'release'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ env.CERT_ID }}
        with:
          tagName: reelix-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: "Reelix v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}
